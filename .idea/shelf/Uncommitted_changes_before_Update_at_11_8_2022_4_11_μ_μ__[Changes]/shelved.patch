Index: Report 2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from fpdf import FPDF\r\nimport webbrowser\r\nimport matplotlib\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas\r\nfrom matplotlib.figure import Figure\r\nimport os\r\nimport math\r\nfrom datetime import date\r\nfrom PIL import Image\r\n\r\ndef Spider_plot(dataL, dataR, DaL,DaR, Number_of_Variables_PLotted, Joint):\r\n\r\n    ANGLESL = [i * math.radians(360/Number_of_Variables_PLotted) - 0.25 for i in range(Number_of_Variables_PLotted)]\r\n    ANGLESR = [i * math.radians(360/Number_of_Variables_PLotted) + 0.25 for i in range(Number_of_Variables_PLotted)]\r\n\r\n    GREY12 = \"#1f1f1f\"\r\n\r\n    # Set default font to Bell MT\r\n    plt.rcParams.update({\"font.family\": \"Bell MT\"})\r\n    plt.rcParams.update({\"font.size\": 16})\r\n\r\n    # Set default font color to GREY12\r\n    plt.rcParams[\"text.color\"] = GREY12\r\n\r\n    # The minus glyph is not available in Bell MT\r\n    # This disables it, and uses a hyphen\r\n    plt.rc(\"axes\", unicode_minus=False)\r\n\r\n    # Colors\r\n    COLORS = [\"#6C5B7B\", \"#C06C84\", \"#F67280\", \"#F8B195\"]\r\n    today = date.today()\r\n\r\n    fig, ax = plt.subplots(figsize=(9, 7), subplot_kw={\"projection\": \"polar\"})\r\n    # fig,ax = plt.subplots()\r\n\r\n\r\n    fig.patch.set_facecolor(\"white\")\r\n    ax.set_facecolor(\"black\")\r\n    ax.set_title(Joint + \"\\n\", fontsize = 30, fontweight='bold')\r\n    if Number_of_Variables_PLotted == 4:\r\n        xTicks_names = ['Glutes\\nL:{L}{c}\\nR:{R}{c}'.format(L=round(DaL[0], 1), R=round(DaR[0], 1), c='Kg'),\r\n                        'Iliopsoas\\nL:{L}{c}\\nR:{R}{c}'.format(L=round(DaL[1], 1), R=round(DaR[1], 1), c='Kg'),\r\n                        'Abductors\\nL:{L}{c}\\nR:{R}{c}'.format(L=round(DaL[2], 1), R=round(DaR[2], 1), c='Kg'),\r\n                        'Adductors\\nL:{L}{c}\\nR:{R}{c}'.format(L=round(DaL[3], 1), R=round(DaR[3], 1), c='Kg')]\r\n    elif Number_of_Variables_PLotted == 6:\r\n        xTicks_names = ['Calf\\nL:{L}{c}\\nR:{R}{c}'.format(L=round(DaL[0], 1), R=round(DaR[0], 1), c='Kg'),\r\n                        'Tibialis Anterior\\nL:{L}{c}\\nR:{R}{c}'.format(L=round(DaL[1], 1), R=round(DaR[1], 1), c='Kg'),\r\n                        'Inversion\\nL:{L}{c}\\nR:{R}{c}'.format(L=round(DaL[2], 1), R=round(DaR[2], 1), c='Kg'),\r\n                        'Eversion\\nL:{L}{c}\\nR:{R}{c}'.format(L=round(DaL[3], 1), R=round(DaR[3], 1), c='Kg'),\r\n                        'Plantar Flexion RoM\\nL:{L}{c}\\nR:{R}{c}'.format(L=round(DaL[3], 1), R=round(DaR[3], 1), c='Kg'),\r\n                        'Dorsi Flexion RoM\\nL:{L}{c}\\nR:{R}{c}'.format(L=round(DaL[3], 1), R=round(DaR[3], 1), c='Kg')]\r\n    xTicks = [i * math.radians(360/Number_of_Variables_PLotted) for i in range(Number_of_Variables_PLotted)]\r\n    plt.xticks(ticks=xTicks, labels='')\r\n    ax.bar(ANGLESR, dataR, color=\"#f40800\", alpha=0.9, width=0.45, zorder=10, label='Right')\r\n    ax.bar(ANGLESL, dataL, color=\"#7a7a7a\", alpha=0.9, width=0.45, zorder=10, label='Left')\r\n    if Joint == 'Ankle':\r\n        plt.legend(loc='upper left', bbox_to_anchor=(0.8, 1.10),\r\n        ncol=1, fancybox=True, shadow=True, prop={'size': 14})\r\n    # plt.tight_layout()\r\n    plt.savefig(\"plot_\" + Joint + \".png\")\r\n    # plt.show()\r\n\r\nwidth = 210\r\nheight = 297\r\n\r\npdf = FPDF()\r\npdf.add_page()\r\n\r\n\r\npdf.set_font('Arial', 'B', 26)\r\npdf.cell(0, 15, 'Athletic Report', 1,1,'C')\r\npdf.cell(0, 5, '', 0,1,'C')\r\n\r\n\r\npdf.set_font('Arial', '', 16)\r\n\r\nCharactiristics_table = [['Name', ':', 'Stylianos', '', 'Age', ':', '26'],\r\n                ['Surname', ':', 'Grigoriadis', '', 'Athletic Age', ':', '22'],\r\n                ['Date', ':', date.today(), '', 'Sport', ':', 'Football'],\r\n                ['Height', ':', '184', '', 'Injury', '=>', ''],\r\n                ['Weight', ':', '104', '', 'Both Legs Ankle Spring', '', '']\r\n                ]\r\npdf.set_font('Arial', '', 14)\r\nlist_for_alingnment_in_charactiristics_table = ['L','C','L','L','L','C','L','L','C','L','L','L','C','L','L','C','L','L','L','C','L','L','C','L','L','L','C','L','L','C','L','L','L','C','L',]\r\nth = pdf.font_size\r\n\r\nfor row in Charactiristics_table:\r\n    for datum,align in zip(row, list_for_alingnment_in_charactiristics_table):\r\n        # Enter data in colums\r\n        # Notice the use of the function str to coerce any input to the\r\n        # string type. This is needed\r\n        # since pyFPDF expects a string, not a number.\r\n        pdf.cell(width/8,1.5 * 14, str(datum), border= 0, align = str(align))\r\n    pdf.ln(1.5 * th)\r\n\r\npdf.cell(0, 5, '', 0,1,'C')\r\npdf.cell(0, 5, '', 0,1,'C')\r\n#Start the writting of Force and RoM\r\npdf.set_font('Arial', 'BUI', 18)\r\npdf.cell(0, 15, 'Force and Range of Motion', 0,1,'L')\r\npdf.cell(0, 5, '', 0,1,'C')\r\n\r\n\r\n#Call Spider_plot for the hip\r\nR = [20, 30, 12, 14]\r\nL = [22, 27, 14, 14]\r\nR_perc = [r/(l+r)*100 for r,l in zip(R,L)]\r\nL_perc = [l/(l+r)*100 for r,l in zip(R,L)]\r\nData_to_annotate_L= L\r\nData_to_annotate_R= R\r\nSpider_plot(L_perc,R_perc,Data_to_annotate_L,Data_to_annotate_R,4,'Hip')\r\n\r\n\r\nprint(pdf.x)\r\nprint(pdf.y)\r\n#save the y, x so that you can use it after to place the other diagrams\r\nsave_x = pdf.x\r\nsave_y = pdf.y\r\n\r\npdf.image(\"plot_Hip.png\",x = pdf.x -26, y = pdf.y,  w = 90, h = 67.5, type = 'PNG', link = '')\r\npdf.set_font('Arial', '', 10)\r\n\r\n\r\n\r\n\r\n#Call Spider_plot for the knee\r\nR = [30, 20, 30/20]\r\nL = [28, 15, 28/15]\r\nR_perc = [r/(l+r)*100 for r,l in zip(R,L)]\r\nL_perc = [l/(l+r)*100 for r,l in zip(R,L)]\r\nData_to_annotate_L= L\r\nData_to_annotate_R= R\r\nSpider_plot(L_perc,R_perc,Data_to_annotate_L,Data_to_annotate_R,3,'Knee')\r\n\r\npdf.y = save_y\r\nprint(pdf.y)\r\npdf.x = save_x + 80\r\n\r\npdf.image(\"plot_Knee.png\",x = pdf.x -32, y = pdf.y,  w = 90, h = 67.5, type = 'PNG', link = '')\r\npdf.set_font('Arial', '', 10)\r\n\r\n\r\n\r\n#save the y, x so that you can use it after to place the other diagrams\r\n\r\n\r\nprint(pdf.x)\r\nprint(pdf.y)\r\n#Call Spider_plot for the ankle\r\n\r\nR = [30, 20, 12, 14]\r\nL = [28, 15, 15, 18]\r\nR_perc = [r/(l+r)*100 for r,l in zip(R,L)]\r\nL_perc = [l/(l+r)*100 for r,l in zip(R,L)]\r\nData_to_annotate_L= L\r\nData_to_annotate_R= R\r\nSpider_plot(L_perc,R_perc,Data_to_annotate_L,Data_to_annotate_R,4,'Ankle')\r\n\r\n\r\nprint(pdf.y)\r\npdf.x = save_x + 160\r\npdf.y = save_y\r\npdf.image(\"plot_Ankle.png\",x = pdf.x -38, y = pdf.y , w = 90, h = 67.5, type = 'PNG', link = '')\r\npdf.set_font('Arial', '', 10)\r\n\r\npdf.x = save_x\r\nprint(pdf.y)\r\nprint(pdf.x)\r\n\r\npdf.y = save_y + 65\r\n# Start the writting of jumps and Yoyo test\r\n\r\npdf.set_font('Arial', 'BUI', 18)\r\npdf.cell(0, 15, 'Jumps and YoYo test', 0,1,'L')\r\npdf.cell(0, 5, '', 0,1,'C')\r\n\r\npdf.set_font('Arial', '', 16)\r\nJumps_table = [['Elastic index','',':',  '10'],\r\n        ['', '','','', ''],\r\n        ['Use of arms','',':', '10'],\r\n        ['', '', ''],\r\n        ['Reflective Power index','',':', '10'],\r\n        ['', '', ''],\r\n        ['YoYo test score', '',':','14']\r\n        ]\r\nsave_y = pdf.y\r\nprint(pdf.y)\r\nth = pdf.font_size\r\n\r\nfor row in Jumps_table:\r\n    for datu in row:\r\n        # Enter data in colums\r\n        # Notice the use of the function str to coerce any input to the\r\n        # string type. This is needed\r\n        # since pyFPDF expects a string, not a number.\r\n        pdf.cell(width/7,th, str(datu), border=0)\r\n    pdf.ln(1.5*th)\r\n\r\nprint(pdf.x)\r\nprint(pdf.y)\r\nsave_y_2 = pdf.y\r\npdf.y = save_y\r\nprint(pdf.y)\r\nsave_x_2 = pdf.x\r\npdf.x = pdf.x +100\r\n\r\ndata = {'Squat Jump': 20, 'Counter-Movement\\nJump        ': 25, 'Counter-Movement\\nJump with Hands': 30,\r\n        'Drop Jump': 22}\r\ncourses = list(data.keys())\r\nvalues = list(data.values())\r\n\r\nfig = plt.figure(figsize=(10, 7))\r\n\r\n# creating the bar plot\r\nplt.bar(courses, values, color='#f40800',\r\n        width=0.4)\r\ny = list(range(1, 50, 5))\r\n\r\nplt.ylabel(\"Height (cm)\",fontsize=20)\r\nplt.title(\"Maximum Height in different Jumps\",fontsize=30)\r\nplt.yticks(fontsize=20)\r\nplt.xticks(fontsize=20, rotation=45,ha='center')\r\nplt.tight_layout()\r\nplt.savefig(\"plot.png\")\r\n# plt.show()\r\n\r\n\r\n\r\npdf.image(\"plot.png\",x = pdf.x , y = pdf.y, w = 100, h = 60, type = 'PNG', link = '')\r\n\r\nprint(pdf.y)\r\nprint(pdf.x)\r\npdf.cell(0, 5, '', 0,1,'C')\r\n#Physical Observation\r\n\r\npdf.y = save_y_2\r\npdf.x = save_x_2\r\n\r\npdf.set_font('Arial', 'BUI', 18)\r\npdf.cell(0, 15, 'Physical Observation', 0,1,'L')\r\npdf.cell(0, 5, '', 0,1,'C')\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\npdf.output('Report_2.pdf', 'F')\r\nwebbrowser.open_new('Report_2.pdf')\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Report 2.py b/Report 2.py
--- a/Report 2.py	(revision 3b17abcafe2ad77e21594e84be7a1a19be135e5c)
+++ b/Report 2.py	(date 1659185182404)
@@ -238,8 +238,9 @@
 pdf.y = save_y_2
 pdf.x = save_x_2
 
+pdf.cell(0, 5, '', 0,1,'C')
 pdf.set_font('Arial', 'BUI', 18)
-pdf.cell(0, 15, 'Physical Observation', 0,1,'L')
+pdf.cell(0, 15, 'Comments', 0,1,'L')
 pdf.cell(0, 5, '', 0,1,'C')
 
 
